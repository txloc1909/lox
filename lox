#!/usr/bin/python3.11

import sys

import error_handling
from scanner import Scanner
from parser import Parser
from resolver import Resolver
from interpreter import Interpreter


class PyLox:
    def __init__(self):
        self.interpreter = Interpreter()
        self.resolver = Resolver(self.interpreter)
        # self._has_error = False
        # self._has_runtime_error = False

    def run(self, src: str):
        tokens = Scanner(src).scan_tokens()
        statements = Parser(tokens).parse()

        if error_handling.HAS_ERROR:
            return

        self.resolver.resolve(statements)
        if error_handling.HAS_ERROR:
            return

        self.interpreter.interpret(statements)

    def run_file(self, fname):
        self.run(open(fname).read())
        if error_handling.HAS_ERROR:
            sys.exit(65)
        if error_handling.HAS_RUNTIME_ERROR:
            sys.exit(70)

    def run_prompt(self):
        while True:
            try:
                line = input(">>> ")
            except EOFError:
                # Ctrl-D exit the REPL
                break

            if line:
                self.run(line)
                error_handling.HAS_ERROR = False


def main(args):
    if len(args) > 2:
        print("Usage: ./lox [script]")
        sys.exit(65)
    elif len(args) == 2:
        PyLox().run_file(args[1])
    else:
        PyLox().run_prompt()


if __name__ == "__main__":
    main(sys.argv)
